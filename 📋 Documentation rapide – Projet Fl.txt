ğŸ“‹ Documentation rapide â€“ Projet Flask Webcam / PiCamera2
ğŸ”¹ DÃ©pendances principales

flask

opencv-python

picamera2 (si Raspberry Pi)

numpy

Pillow (optionnel, pour manipuler les images)

openai (si tu utilises lâ€™analyse IA)

ğŸ”¹ Structure projet
project/
â”‚â”€â”€ app.py
â”‚â”€â”€ templates/
â”‚   â”œâ”€â”€ index.html        (page avec la webcam + boutons capture/analyse)
â”‚   â”œâ”€â”€ gallery.html      (galerie des captures)
â”‚   â””â”€â”€ analyze.html      (analyse + grille interactive + OpenAI)
â”‚â”€â”€ static/
â”‚   â”œâ”€â”€ captures/         (images capturÃ©es et extraites)
â”‚   â””â”€â”€ style.css         (si tu ajoutes du style global)

ğŸ”¹ Routes Flask

/ â†’ page dâ€™accueil avec le flux vidÃ©o (generate_frames()) + boutons

/video_feed â†’ flux vidÃ©o MJPEG (utilisÃ© dans <img src> pour afficher la camÃ©ra en direct)

/capture â†’ capture une image via get_frame() et la sauvegarde dans static/captures/

/gallery â†’ affiche toutes les images du dossier static/captures/

/delete/<filename> â†’ supprime une capture de la galerie

/analyze/<filename> â†’ affiche la page dâ€™analyse dâ€™une capture avec la grille

/ask_openai/<filename> â†’ envoie lâ€™image + question texte Ã  OpenAI (vision API) et retourne la rÃ©ponse

/save_extraction â†’ reÃ§oit une zone sÃ©lectionnÃ©e (base64) et la sauvegarde dans static/captures/

ğŸ”¹ CamÃ©ra (portable PC â†” Pi)

Fonction get_frame() â†’ retourne une image depuis :

Picamera2 (picam2.capture_array()) si dispo

sinon OpenCV (cv2.VideoCapture(0))

UtilisÃ©e dans :

generate_frames() (flux live)

/capture (sauvegarde dâ€™image)

ğŸ”¹ Grille interactive (analyse.html)

Grille paramÃ©trable (ex. 4Ã—4, 8Ã—8) superposÃ©e sur lâ€™image.

NumÃ©rotation automatique des cases.

SÃ©lection rectangulaire cliquer-glisser avec la souris.

Extraction dâ€™image cÃ´tÃ© client avec Canvas.

Sauvegarde cÃ´tÃ© serveur via /save_extraction.

Chaque extraction affichÃ©e avec bouton â¬‡ TÃ©lÃ©charger.

ğŸ”¹ IntÃ©gration OpenAI

Upload image capturÃ©e + question utilisateur.

Envoi Ã  gpt-4o-mini ou gpt-4o avec messages multimodaux :

client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "Tu es un assistant d'analyse d'image"},
        {"role": "user", "content": [
            {"type": "text", "text": question},
            {"type": "image_url", "image_url": {"url": f"file://{image_path}"}}
        ]}
    ]
)

ğŸ”¹ Checklist rapide (dev)

 VÃ©rifier que static/captures/ existe

 VÃ©rifier que picamera2 est installÃ© sur Raspberry Pi

 VÃ©rifier que app.secret_key est dÃ©fini (si tu utilises des formulaires)

 Ajouter requirements.txt pour rÃ©installer facilement les dÃ©pendances